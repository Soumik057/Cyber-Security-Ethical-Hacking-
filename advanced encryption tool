from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os

# Generate RSA private and public keys (Asymmetric encryption)
def generate_rsa_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )

    public_key = private_key.public_key()

    # Save private key to PEM file
    with open("private_key.pem", "wb") as private_file:
        private_file.write(private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ))

    # Save public key to PEM file
    with open("public_key.pem", "wb") as public_file:
        public_file.write(public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ))

    print("RSA Keys generated and saved as 'private_key.pem' and 'public_key.pem'.")

# Encrypt a message using RSA public key (Asymmetric encryption)
def rsa_encrypt(plain_text, public_key_path="public_key.pem"):
    with open(public_key_path, "rb") as key_file:
        public_key = serialization.load_pem_public_key(key_file.read(), backend=default_backend())

    encrypted_message = public_key.encrypt(
        plain_text.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted_message

# Decrypt a message using RSA private key (Asymmetric decryption)
def rsa_decrypt(encrypted_message, private_key_path="private_key.pem"):
    with open(private_key_path, "rb") as key_file:
        private_key = serialization.load_pem_private_key(key_file.read(), password=None, backend=default_backend())

    decrypted_message = private_key.decrypt(
        encrypted_message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted_message.decode()

# Generate AES key for symmetric encryption
def generate_aes_key():
    key = os.urandom(32)  # 256-bit key
    return key

# Encrypt data using AES (Symmetric encryption)
def aes_encrypt(plain_text, aes_key):
    # Generate a random 16-byte IV (Initialization Vector)
    iv = os.urandom(16)
    
    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Padding the plaintext to be multiple of block size (AES block size = 16 bytes)
    pad_length = 16 - len(plain_text) % 16
    padded_plain_text = plain_text + chr(pad_length) * pad_length

    encrypted_message = encryptor.update(padded_plain_text.encode()) + encryptor.finalize()
    return iv + encrypted_message  # Prepend IV to the ciphertext for later use

# Decrypt data using AES (Symmetric decryption)
def aes_decrypt(encrypted_message, aes_key):
    iv = encrypted_message[:16]  # Extract the IV
    cipher_text = encrypted_message[16:]  # Extract the cipher text

    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    padded_plain_text = decryptor.update(cipher_text) + decryptor.finalize()

    # Remove padding
    pad_length = padded_plain_text[-1]
    plain_text = padded_plain_text[:-pad_length].decode()
    return plain_text

# Main function to test the tool
def main():
    choice = input("Choose encryption method (1 - RSA, 2 - AES): ")
    
    if choice == "1":
        # RSA (Asymmetric) encryption
        print("\nRSA Encryption/Decryption")
        message = input("Enter the message to encrypt: ")
        encrypted_message = rsa_encrypt(message)
        print(f"Encrypted message (RSA): {encrypted_message.hex()}")

        decrypted_message = rsa_decrypt(encrypted_message)
        print(f"Decrypted message (RSA): {decrypted_message}")

    elif choice == "2":
        # AES (Symmetric) encryption
        print("\nAES Encryption/Decryption")
        aes_key = generate_aes_key()
        print("AES Key generated.")

        message = input("Enter the message to encrypt: ")
        encrypted_message = aes_encrypt(message, aes_key)
        print(f"Encrypted message (AES): {encrypted_message.hex()}")

        decrypted_message = aes_decrypt(encrypted_message, aes_key)
        print(f"Decrypted message (AES): {decrypted_message}")

    else:
        print("Invalid choice. Please select 1 for RSA or 2 for AES.")

if __name__ == "__main__":
    # Generate RSA keys
    # You only need to run this once to create the keys
    generate_rsa_keys()

    # Run the main function
    main()
