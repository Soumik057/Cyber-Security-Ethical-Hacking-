import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class WebVulnScanner:
    def __init__(self, target_url):
        self.target_url = target_url

    def is_sql_injection_vulnerable(self):
        test_payloads = ["' OR 1=1 --", '" OR "a"="a', "' OR 'x'='x", "1' OR 1=1"]
        for payload in test_payloads:
            test_url = f"{self.target_url}{payload}"
            response = requests.get(test_url)
            if "error" in response.text.lower() or "syntax" in response.text.lower():
                print(f"[+] Potential SQL Injection vulnerability found at {test_url}")
                return True
        print("[-] No SQL Injection vulnerability detected.")
        return False

    def is_xss_vulnerable(self):
        test_payloads = ['<script>alert("XSS")</script>', '<img src="x" onerror="alert(1)">']
        for payload in test_payloads:
            test_url = f"{self.target_url}{payload}"
            response = requests.get(test_url)
            if payload in response.text:
                print(f"[+] Potential XSS vulnerability found at {test_url}")
                return True
        print("[-] No XSS vulnerability detected.")
        return False

    def is_open_redirect_vulnerable(self):
        test_payload = "http://evil.com"
        test_url = f"{self.target_url}?url={test_payload}"
        response = requests.get(test_url)
        if response.url != test_url:
            print(f"[+] Potential Open Redirect vulnerability found at {test_url}")
            return True
        print("[-] No Open Redirect vulnerability detected.")
        return False

    def check_security_headers(self):
        response = requests.get(self.target_url)
        headers = response.headers

        missing_headers = []
        if "X-Content-Type-Options" not in headers:
            missing_headers.append("X-Content-Type-Options")
        if "Strict-Transport-Security" not in headers:
            missing_headers.append("Strict-Transport-Security")
        if "X-Frame-Options" not in headers:
            missing_headers.append("X-Frame-Options")
        if "Content-Security-Policy" not in headers:
            missing_headers.append("Content-Security-Policy")
        if "X-XSS-Protection" not in headers:
            missing_headers.append("X-XSS-Protection")

        if missing_headers:
            print(f"[-] Missing security headers: {', '.join(missing_headers)}")
        else:
            print("[+] All essential security headers are present.")

    def scan(self):
        print(f"Scanning {self.target_url} for vulnerabilities...\n")
        self.is_sql_injection_vulnerable()
        self.is_xss_vulnerable()
        self.is_open_redirect_vulnerable()
        self.check_security_headers()

if __name__ == "__main__":
    target_url = input("Enter the URL to scan: ").strip()
    if not target_url.startswith("http"):
        target_url = "http://" + target_url
    scanner = WebVulnScanner(target_url)
    scanner.scan()
