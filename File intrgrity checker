import hashlib
import os
import json

# Helper function to compute the SHA256 hash of a file
def compute_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            # Read file in small chunks to avoid memory overload
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except FileNotFoundError:
        print(f"Error: {file_path} not found!")
        return None
    except Exception as e:
        print(f"Error computing hash for {file_path}: {e}")
        return None

# Save the hash of the file to a JSON file (store the integrity data)
def save_file_hash(file_path, hash_value, hash_db_path="hashes.json"):
    if os.path.exists(hash_db_path):
        with open(hash_db_path, 'r') as f:
            hash_db = json.load(f)
    else:
        hash_db = {}

    hash_db[file_path] = hash_value

    with open(hash_db_path, 'w') as f:
        json.dump(hash_db, f, indent=4)
    print(f"Hash for {file_path} saved.")

# Check the integrity of a file by comparing its current hash with the stored one
def check_file_integrity(file_path, hash_db_path="hashes.json"):
    try:
        with open(hash_db_path, 'r') as f:
            hash_db = json.load(f)
        
        if file_path not in hash_db:
            print(f"No hash record found for {file_path}.")
            return

        # Get the previously saved hash and compute the current hash
        saved_hash = hash_db[file_path]
        current_hash = compute_file_hash(file_path)

        if current_hash is None:
            print(f"Unable to check file integrity for {file_path}.")
            return

        if saved_hash == current_hash:
            print(f"File {file_path} is intact. No changes detected.")
        else:
            print(f"Warning: File {file_path} has been modified!")
    
    except FileNotFoundError:
        print(f"Error: {hash_db_path} not found!")
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON format in {hash_db_path}.")
    except Exception as e:
        print(f"Error checking integrity for {file_path}: {e}")

# Main function for user interaction
def main():
    print("File Integrity Checker")

    while True:
        print("\nChoose an option:")
        print("1. Save file hash")
        print("2. Check file integrity")
        print("3. Exit")

        choice = input("Enter your choice (1/2/3): ").strip()

        if choice == "1":
            file_path = input("Enter the file path to save hash: ").strip()
            file_hash = compute_file_hash(file_path)
            if file_hash:
                save_file_hash(file_path, file_hash)
        
        elif choice == "2":
            file_path = input("Enter the file path to check integrity: ").strip()
            check_file_integrity(file_path)
        
        elif choice == "3":
            print("Exiting the program.")
            break
        
        else:
            print("Invalid choice. Please try again.")

# Run the program
if __name__ == "__main__":
    main()
